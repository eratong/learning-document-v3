import{_ as a,o as e,c as s,X as n}from"./chunks/framework.9bc23fa4.js";const l="/learning-document-v3/assets/image-20220307142309061.d3c52214.png",t="/learning-document-v3/assets/image-20220308102654629.2791c0ed.png",o="/learning-document-v3/assets/image-20220307165941621.d9fd8ad8.png",p="/learning-document-v3/assets/image-20220308112102261.ac37c4cb.png",r="/learning-document-v3/assets/image-20220307164708746.5cbe8d08.png",i="/learning-document-v3/assets/image-20220307175421079.a35e074c.png",A=JSON.parse('{"title":"webpack","description":"","frontmatter":{},"headers":[],"relativePath":"data/前端/webpack.md","filePath":"data/前端/webpack.md","lastUpdated":1720420715000}'),c={name:"data/前端/webpack.md"},d=n('<h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="chunk" tabindex="-1">chunk <a class="header-anchor" href="#chunk" aria-label="Permalink to &quot;chunk&quot;">​</a></h3><p>chunk就是将一个大文件拆分出来的一部分代码，拆分成小的就为了提高浏览器加载速度的。chunk-vendors一般是你引用的第三方库的代码</p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><h3 id="_1-命令" tabindex="-1">① 命令 <a class="header-anchor" href="#_1-命令" aria-label="Permalink to &quot;① 命令&quot;">​</a></h3><p>webpack-dev-server ：会将打包结果输出出去</p><p>npx webpack-dev-server：只会在内存中编译打包，没有输出</p><p><img src="'+l+'" alt="image-20220307142309061"></p><h3 id="_2-拒绝打包-externals" tabindex="-1">② 拒绝打包 externals <a class="header-anchor" href="#_2-拒绝打包-externals" aria-label="Permalink to &quot;② 拒绝打包 externals&quot;">​</a></h3><p><img src="'+t+'" alt="image-20220308102654629"></p><h3 id="_3-多进程打包" tabindex="-1">③ 多进程打包 <a class="header-anchor" href="#_3-多进程打包" aria-label="Permalink to &quot;③ 多进程打包&quot;">​</a></h3><p>thread-loader</p><ol><li>剥离万象项目的代码模块(太一、南风、游戏运营后台、渠道商)，这一块已经有专人处理</li><li>借助<code>webpack-bundle-analyzer</code>分析打包的情况(数量、体积) main.js文件太大，引入组件太多（路由动态加载，公共组件开发哪里使用哪里引用，不要注册到main.js</li><li>）</li><li>生产环境 结合externals属性，对vue全家桶使用CDN，不打包这些</li><li>loadash按需打包</li><li>HardSourceWebpackPlugin优化二次打包速度</li><li>optimization 公共代码抽离</li><li>启用DllPlugin和DllReferencePlugin预编译库文件，新建webpack.dll.conf.js文件，二次打包无变化 不打包</li><li>开启Gzip压缩（之前已开启）</li><li>UglifyJsPlugin配置代码压缩</li><li>image-webpack-loader配置图片压缩</li></ol><h3 id="_4-dll-打包" tabindex="-1">④ dll 打包 <a class="header-anchor" href="#_4-dll-打包" aria-label="Permalink to &quot;④ dll 打包&quot;">​</a></h3><p>使用dll技术，对某些库（第三方库jquery、vue）进行单独打包</p><p><a href="https://blog.csdn.net/weixin_39773218/article/details/97494099" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_39773218/article/details/97494099</a></p><h3 id="_5-单独打包" tabindex="-1">⑤ 单独打包 <a class="header-anchor" href="#_5-单独打包" aria-label="Permalink to &quot;⑤ 单独打包&quot;">​</a></h3><p><strong>在默认配置下，main.js中异步加载或间接异步加载的模块，都会被另外打包生成一个js文件。</strong></p><p>import动态导入语法：能将某个文件单独打包</p><p><img src="'+o+'" alt="image-20220307165941621"></p><h3 id="_6-打包优化" tabindex="-1">⑥ 打包优化 <a class="header-anchor" href="#_6-打包优化" aria-label="Permalink to &quot;⑥ 打包优化&quot;">​</a></h3><p><img src="'+p+'" alt="image-20220308112102261"></p><h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><p>可以转换不同代码</p><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或 &quot;load(加载)&quot; 模块时预处理文件</p><p>loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS 文件</p><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><h3 id="_1、splitchunks插件" tabindex="-1">1、SplitChunks插件 <a class="header-anchor" href="#_1、splitchunks插件" aria-label="Permalink to &quot;1、SplitChunks插件&quot;">​</a></h3><p>是Webpack中一个提取或分离代码的插件，主要作用是提取公共代码，防止代码被重复打包，拆分过大的js文件，合并零散的js文件，SplitChunks插件的作用就是通过配置让Webpack去帮你提取公共代码</p><p><img src="'+r+'" alt="image-20220307164708746"></p><p>懒加载、预加载</p><p><img src="'+i+`" alt="image-20220307175421079"></p><h4 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h4><h5 id="_1-splitchunks实战入口文件" tabindex="-1">① SplitChunks实战入口文件 <a class="header-anchor" href="#_1-splitchunks实战入口文件" aria-label="Permalink to &quot;① SplitChunks实战入口文件&quot;">​</a></h5><p>发现chunk-vendors.js的大小有点大了，有1.91MB，还是项目初始化时需要加载的js文件，大小过大会导致首屏加载时间过长。要优化一下，由两种方法</p><p>第一种用externals来优化</p><p>第二种用SplitChunks优化。例如要把<em>element</em>从<em>chunk-vendors.js</em>提取出来，要在<code>cacheGroups</code>中配置：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    chunks: &#39;all&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: \`element-ui\`,</span></span>
<span class="line"><span style="color:#A6ACCD;">    test: /[\\\\/]element-ui[\\\\/]/,</span></span>
<span class="line"><span style="color:#A6ACCD;">    priority: 0,</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span></code></pre></div><p>其中要注意<code>priority</code>选项，要把element单独提取出来，<strong><code>priority</code>的值必须比vendors方案中的<code>priority</code>的值大</strong>，不然提取不出来。</p><p>打包后可看到element被打包生成新的<em>element-ui.js</em>文件，chunk-vendors.js大小变成1.27MB，比原来的1.91MB有减小</p><h5 id="_2-splitchunks实战非入口文件" tabindex="-1">② SplitChunks实战非入口文件 <a class="header-anchor" href="#_2-splitchunks实战非入口文件" aria-label="Permalink to &quot;② SplitChunks实战非入口文件&quot;">​</a></h5><h4 id="参考链接" tabindex="-1">参考链接： <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接：&quot;">​</a></h4><p><a href="https://zhuanlan.zhihu.com/p/152097785?from_voters_page=true" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/152097785?from_voters_page=true</a></p><h3 id="_2、webpack-bundle-analyzer插件" tabindex="-1">2、webpack-bundle-analyzer插件 <a class="header-anchor" href="#_2、webpack-bundle-analyzer插件" aria-label="Permalink to &quot;2、webpack-bundle-analyzer插件&quot;">​</a></h3><p>可以可视化分析打包后的文件,打包后，会在浏览器自动打开<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8888/" target="_blank" rel="noreferrer">http://127.0.0.1:8888/</a>，内容如下所示</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install webpack-bundle-analyzer --save-dev</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> BundleAnalyzerPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-bundle-analyzer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BundleAnalyzerPlugin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports={</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">configureWebpack</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BundleAnalyzerPlugin</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            ]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="https://pic4.zhimg.com/80/v2-0d848640762342ca44334747dcfe009b_720w.jpg" alt="img"></p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>chunk 有两种形式：</p><ul><li><code>initial(初始化)</code> 是入口起点的 main chunk。此 chunk 包含为入口起点指定的所有模块及其依赖项。</li><li><code>non-initial</code> 是可以延迟加载的块。可能会出现在使用 <a href="https://webpack.docschina.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noreferrer">动态导入(dynamic imports)</a> 或者 <a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noreferrer">SplitChunksPlugin</a> 时</li></ul><h1 id="pwa" tabindex="-1">PWA <a class="header-anchor" href="#pwa" aria-label="Permalink to &quot;PWA&quot;">​</a></h1><p>PWA 全称为 Progressive Web App，中文译为渐进式 Web APP，其目的是通过各种 Web 技术实现与原生 App 相近的用户体验。</p><p>Web 应用与原生应用的对比差距，比如离线缓存、沉浸式体验等等</p><h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h1><p>前端打包工具 <a href="https://vite.dev/guide/" target="_blank" rel="noreferrer">https://vite.dev/guide/</a></p>`,57),h=[d];function u(m,b,k,g,y,_){return e(),s("div",null,h)}const C=a(c,[["render",u]]);export{A as __pageData,C as default};
