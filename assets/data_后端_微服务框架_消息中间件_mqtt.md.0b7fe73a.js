import{_ as a,o as e,c as s,X as t}from"./chunks/framework.9bc23fa4.js";const r="/learning-document-v3/assets/image1.66379fc5.png",q=JSON.parse('{"title":"mqtt","description":"","frontmatter":{},"headers":[],"relativePath":"data/后端/微服务框架/消息中间件/mqtt.md","filePath":"data/后端/微服务框架/消息中间件/mqtt.md","lastUpdated":1720424770000}'),l={name:"data/后端/微服务框架/消息中间件/mqtt.md"},n=t('<h1 id="mqtt" tabindex="-1">mqtt <a class="header-anchor" href="#mqtt" aria-label="Permalink to &quot;mqtt&quot;">​</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&quot;轻量级&quot;通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><h4 id="结构图" tabindex="-1">结构图 <a class="header-anchor" href="#结构图" aria-label="Permalink to &quot;结构图&quot;">​</a></h4><p><img src="'+r+`" alt="image"></p><h4 id="broker-代理服务器" tabindex="-1">Broker（代理服务器） <a class="header-anchor" href="#broker-代理服务器" aria-label="Permalink to &quot;Broker（代理服务器）&quot;">​</a></h4><p>MQTT 系统中负责接收和分发消息的服务器，是 MQTT 系统的核心组件。</p><h4 id="publisher-发布者" tabindex="-1">Publisher（发布者） <a class="header-anchor" href="#publisher-发布者" aria-label="Permalink to &quot;Publisher（发布者）&quot;">​</a></h4><p>向 Broker 发布消息的客户端，可以选择一个或多个主题进行消息发布。</p><h4 id="subscriber-订阅者" tabindex="-1">Subscriber（订阅者） <a class="header-anchor" href="#subscriber-订阅者" aria-label="Permalink to &quot;Subscriber（订阅者）&quot;">​</a></h4><p>订阅感兴趣的主题，并接收相关消息的客户端。</p><h4 id="topic-主题" tabindex="-1">Topic（主题） <a class="header-anchor" href="#topic-主题" aria-label="Permalink to &quot;Topic（主题）&quot;">​</a></h4><p>用来标识消息的分类和结构。Publisher 将消息发布到特定的主题上，Subscriber 订阅特定的主题以接收相关消息。</p><h4 id="消息" tabindex="-1">消息 <a class="header-anchor" href="#消息" aria-label="Permalink to &quot;消息&quot;">​</a></h4><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：<br> （1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；<br> （2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p><h3 id="mqtt-的消息传递流程的详细步骤" tabindex="-1">MQTT 的消息传递流程的详细步骤 <a class="header-anchor" href="#mqtt-的消息传递流程的详细步骤" aria-label="Permalink to &quot;MQTT 的消息传递流程的详细步骤&quot;">​</a></h3><p>客户端连接：Publisher 或 Subscriber 通过 TCP/IP 连接到 Broker。<br> 客户端注册：客户端发送 CONNECT 报文到 Broker，包含客户端的身份认证信息、协议版本号等。<br> 会话建立：Broker 接收到 CONNECT 报文后，根据客户端的身份认证信息进行验证，并为客户端创建对应的会话。<br> 主题订阅：Subscriber 发送 SUBSCRIBE 报文到 Broker，指定订阅的主题。<br> 订阅确认：Broker 收到 SUBSCRIBE 报文后，在订阅列表中将 Subscriber 加入，并返回 SUBACK 报文给 Subscriber。<br> 消息发布：Publisher 发送 PUBLISH 报文到 Broker，包含消息的主题和内容。<br> 消息分发：Broker 收到 PUBLISH 报文后，根据主题将消息分发给订阅了该主题的所有 Subscriber。<br> 消息传递：Subscriber 收到经过分发的消息后，进行相应的处理。<br> 客户端断开：客户端发送 DISCONNECT 报文到 Broker，表明断开连接。</p><h3 id="mqtt-的消息质量等级" tabindex="-1">MQTT 的消息质量等级 <a class="header-anchor" href="#mqtt-的消息质量等级" aria-label="Permalink to &quot;MQTT 的消息质量等级&quot;">​</a></h3><p>MQTT 定义了三种消息质量等级，用于确保消息的可靠传递：<br> 最多一次（At Most Once）：消息发布后，不进行任何确认和重传机制，消息可能会丢失或重复。<br> 至少一次（At Least Once）：消息发布后，接收者必须返回一个确认消息（PUBACK）给发布者，如果发布者没有收到确认消息，则会重传消息，确保至少一次的消息传递。<br> 只有一次（Exactly Once）：消息发布和传递过程中进行了多次握手和确认，确保消息只被传递一次。<br> 通过选择合适的质量等级，可以根据实际需求平衡消息传递的可靠性和性能。</p><p>参考文档 <a href="https://developer.aliyun.com/article/1359775" target="_blank" rel="noreferrer">https://developer.aliyun.com/article/1359775</a></p><h2 id="客户端工具" tabindex="-1">客户端工具 <a class="header-anchor" href="#客户端工具" aria-label="Permalink to &quot;客户端工具&quot;">​</a></h2><h3 id="mqttx" tabindex="-1">MQTTX <a class="header-anchor" href="#mqttx" aria-label="Permalink to &quot;MQTTX&quot;">​</a></h3><p><a href="https://mqttx.app/web-client" target="_blank" rel="noreferrer">https://mqttx.app/web-client</a></p><h3 id="mqtt-explorer" tabindex="-1">MQTT Explorer <a class="header-anchor" href="#mqtt-explorer" aria-label="Permalink to &quot;MQTT Explorer&quot;">​</a></h3><p>参考文档 <a href="https://www.emqx.com/zh/blog/mqtt-client-tools" target="_blank" rel="noreferrer">https://www.emqx.com/zh/blog/mqtt-client-tools</a></p><h2 id="java中使用mqtt" tabindex="-1">JAVA中使用MQTT <a class="header-anchor" href="#java中使用mqtt" aria-label="Permalink to &quot;JAVA中使用MQTT&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">MqttClient</span><span style="color:#A6ACCD;"> mqttClient</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 发送消息</span></span>
<span class="line"><span style="color:#A6ACCD;">mqttClient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">publish</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 订阅主题</span></span>
<span class="line"><span style="color:#A6ACCD;">mqttClient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topicFilter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qos</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">mqttClient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isConnected</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">mqttClient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disconnect</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">mqttClient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,28),o=[n];function p(c,i,h,b,d,m){return e(),s("div",null,o)}const C=a(l,[["render",p]]);export{q as __pageData,C as default};
