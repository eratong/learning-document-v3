import{_ as s,o as a,c as n,X as l}from"./chunks/framework.9bc23fa4.js";const p="/learning-document-v3/assets/image1.61ab4c21.png",d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"data/后端/编程语言/java/开发工具/包管理工具.md","filePath":"data/后端/编程语言/java/开发工具/包管理工具.md","lastUpdated":1720420715000}'),o={name:"data/后端/编程语言/java/开发工具/包管理工具.md"},e=l(`<h2 id="maven" tabindex="-1">maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;maven&quot;">​</a></h2><p>compile、provided、test、runtime</p><p>Maven中的-D（Properties属性）和-P（Profiles配置文件）</p><h2 id="gradle" tabindex="-1">gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;gradle&quot;">​</a></h2><h3 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h3><h4 id="文件含义" tabindex="-1">文件含义 <a class="header-anchor" href="#文件含义" aria-label="Permalink to &quot;文件含义&quot;">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gradle</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_wrapper</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_gradle-wrapper.jar</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_gradle-wrapper.properties</span></span>
<span class="line"><span style="color:#FFCB6B;">build.gradle</span></span>
<span class="line"><span style="color:#FFCB6B;">gradlew</span></span>
<span class="line"><span style="color:#FFCB6B;">gradlew.bat</span></span>
<span class="line"><span style="color:#FFCB6B;">setting.gradle</span></span></code></pre></div><p>gradle-wrapper.jar： 这是 Gradle Wrapper JAR 文件，它包含 Gradle Wrapper 的主要逻辑和代码。Gradle Wrapper 是一个用于下载、安装和运行指定 Gradle 版本的工具，可以帮助确保项目的构建过程使用的是项目所需的特定 Gradle 版本。</p><p>gradle-wrapper.properties： 这个属性文件定义了 Gradle Wrapper 的配置，包括指定要使用的 Gradle 版本以及下载 Gradle 的地址等信息。</p><p>build.gradle.kts：这是 Gradle 构建脚本文件，通常使用 Kotlin DSL（Domain Specific Language）编写。该文件定义了项目的构建配置，包括项目依赖、任务定义、插件应用等。</p><p>gradlew 和 gradlew.bat：这是 Gradle Wrapper 脚本文件，用于在项目中运行 Gradle 命令。通过运行 ./gradlew（Linux/macOS）或 gradlew.bat（Windows）命令，可以使用项目中指定的 Gradle 版本来执行构建任务，而不需要手动安装 Gradle。</p><p>settings.gradle.kts：这个文件用于定义 Gradle 多项目构建的设置，例如指定根项目名称、包含子项目等。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// build.gradle文件内容</span></span>
<span class="line"><span style="color:#A6ACCD;">plugins </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    java</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.boot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.2.4</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">io.spring.dependency-management</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.1.4</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.0.1-SNAPSHOT</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">java </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    sourceCompatibility </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JavaVersion</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERSION_17</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">repositories </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">mavenCentral</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">dependencies </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 依赖都写在这</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">implementation</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.boot:spring-boot-starter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">testImplementation</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.boot:spring-boot-starter-test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">exclude</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.junit.vintage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">junit-vintage-engine</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">implementation</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.boot:spring-boot-starter-web</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">testImplementation</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.boot:spring-boot-starter-test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">implementation</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.alibaba:fastjson:1.2.76</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">compileOnly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.projectlombok:lombok:1.18.32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Test</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">useJUnitPlatform</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apply plugin</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">mainClassName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.gensci.parasol.admin.AdminApplication</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">applicationDefaultJvmArgs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Dapollo.configService=https://apollo.net</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Dapollo.configService.username=apollo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Dapollo.configService.password=123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Dlog.dir=/Users/xyt/Desktop/fm/log</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Dserver.port=3001</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><h4 id="gradle侧边栏" tabindex="-1">gradle侧边栏 <a class="header-anchor" href="#gradle侧边栏" aria-label="Permalink to &quot;gradle侧边栏&quot;">​</a></h4><p>打包命令 点击Tasks=&gt; build=&gt; bootjar或者Tasks=&gt; build=&gt; build <br> 生成jar，路径：jar包路径在/build/libs</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Tasks</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_application</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_build</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">setup</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_documentation</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_help</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_other</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_verification</span></span>
<span class="line"><span style="color:#FFCB6B;">Dependencies</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_compileClasspath</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_runtimeClasspath</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_testCompileClasspath</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">_testRuntimeClasspath</span></span></code></pre></div><p>application： 这个任务通常是用于构建和启动应用程序的任务，可以将项目打包成可执行的应用程序。<br> build： 这个任务用于执行整个构建过程，包括编译、打包、测试等操作。<br> build setup： 这个任务用于设置构建环境，可能包括下载依赖、配置构建目录等操作。<br> documentation： 这个任务用于生成项目的文档，例如 Javadoc 或其他文档格式。<br> help： 这个任务通常用于显示有关项目和任务的帮助信息。<br> other： 这个分类可能包含项目定义的其他自定义任务。<br> verification： 这个任务用于执行项目验证，例如运行测试、检查代码质量等操作。</p><p>compileClasspath： 这是编译时类路径，包含编译项目代码所需的依赖项。<br> runtimeClasspath： 运行时类路径，包含项目在运行时需要的依赖项。<br> testCompileClasspath： 测试编译类路径，包含编译测试代码所需的依赖项。<br> testRuntimeClasspath： 测试运行时类路径，包含运行测试时需要的依赖项。</p><p>1.implementation，默认的scope。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。</p><p>2.api，和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。</p><p>3.compileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。</p><p>4.testImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。</p><p>5.testCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。</p><h4 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h4><p><img src="`+p+'" alt="image"></p><p>初始化阶段 Initiliazation初始化阶段，主要任务是创建项目的层次结构，为每一个项目创建一个Project对象，对应就是执行setting.gradle，一个setting.gradle对应一个setting对象，在setting.gradle中可以直接调用其中的方法,Settings API文档</p><p>配置阶段 下一个阶段就是Configration配置阶段,它主要是配置每个Project中的build.gradle,在初始化阶段和配置阶段之间，我们可以加入Hook，这是通过API添加的 Configration阶段完成之后，整个build的project以及内部的Task关系都确定了，我们可以通过gradle的getTaskGraph方法访问,对应的类为TaskExecutionGraph,TaskExecutionGraph API文档 我们知道每个Project都由多个Task组成，每个Task之间都有依赖关系，Configuration阶段会建立一个有向图来描述Task之间的依赖关系，这里也可以添加一个Hook，当有向图建立完成之后进行一些操作 每个build.gradle对应一个Project对象，在初始化阶段创建，这里是Project API文档</p><p>执行阶段 最后一个阶段就是执行阶段，这一阶段的主要是执行Task，这里也可以加Hook，当任务执行完之后做一些事情</p><p>gradle-groovy</p><p>gradle-kotlin</p><p>Groovy 是一种动态语言，而 Kotlin 是静态类型。 这表示，使用 Kotlin DSL 时，构建脚本错误可能发生在编译时而不是运行时。</p><p>使用动态类型检查，在执行构建脚本之前不会检测到错误</p><h3 id="多模块配置" tabindex="-1">多模块配置 <a class="header-anchor" href="#多模块配置" aria-label="Permalink to &quot;多模块配置&quot;">​</a></h3><p><a href="https://plugins.gradle.org/" target="_blank" rel="noreferrer">https://plugins.gradle.org/</a></p><p>参考文档 <a href="https://www.yuque.com/youyi-ai1ik/emphm9/kyhenl" target="_blank" rel="noreferrer">https://www.yuque.com/youyi-ai1ik/emphm9/kyhenl</a>?</p>',36),t=[e];function r(c,D,i,F,y,C){return a(),n("div",null,t)}const u=s(o,[["render",r]]);export{d as __pageData,u as default};
